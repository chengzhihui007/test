参考网址：
https://www.cnblogs.com/sueyyyy/p/9958836.html

nohup java -jar xxx.jar &
这样执行后，nohup会把执行结果中的日志输出到当前文件夹下面的nohup.out文件中，通常情况下我们使用以上命令即可。 

我们也可以手动指定一个参数来规定日志文件的输出地点，如：
nohup java -jar xxx.jar > catalina.out  2>&1 &


如果不需要输出日志，可以使用如下命令
nohup java -jar xxx.jar >/dev/null &


关闭应用的脚本：stop.sh

#!/bin/bash
PID=$(ps -ef | grep yourapp.jar | grep -v grep | awk '{ print $2 }')
if [ -z "$PID" ]
then
    echo Application is already stopped
else
    echo kill $PID
    kill $PID
fi

启动应用的脚本：start.sh

#!/bin/bash
nohup java -jar yourapp.jar --server.port=8888 &

整合了关闭和启动的脚本：run.sh，由于会先执行关闭应用，然后再启动应用，这样不会引起端口冲突等问题，适合在持续集成系统中进行反复调用。

#!/bin/bash
echo stop application
source stop.sh
echo start application
source start.sh

系统服务
在Spring Boot的Maven插件中，还提供了构建完整可执行程序的功能，什么意思呢？就是说，我们可以不用java -jar，而是直接运行jar来执行程序。这样我们就可以方便的将其创建成系统服务在后台运行了。主要步骤如下：

在pom.xml中添加Spring Boot的插件，并注意设置executable配置

<build>
  <plugins>
    <plugin>
      <groupId>org.springframework.boot</groupId> 
      <artifactId>spring-boot-maven-plugin</artifactId> 
      <configuration>
        <executable>true</executable>
      </configuration>
    </plugin>
  </plugins>
</build>

在完成上述配置后，使用mvn install进行打包，构建一个可执行的jar包

创建软连接到/etc/init.d/目录下
sudo ln -s /var/yourapp/yourapp.jar /etc/init.d/yourapp

在完成软连接创建之后，我们就可以通过如下命令对yourapp.jar应用来控制启动、停止、重启操作了
/etc/init.d/yourapp start|stop|restart
 

综上，一般情况下我们使用以下命令即可：
nohup java -jar xxx.jar &
