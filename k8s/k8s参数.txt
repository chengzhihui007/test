Kubernetes基本概念和术语

	·Master
	Kubernetes里的Master指的是集群控制节点，每个Kubernetes集群里需要有一个Master节点来负责整个集群的管理和控制，基本上Kubernetes所有的控制命令都是发给它，它来负责具体的执行过程，我们后面所有执行的命令基本上都是在Master节点上运行的。Master节点通常会占据一个独立的X86服务器(或者一个虚拟机)，一个主要的原因是它太重要了，它是整个集群的“首脑”，如果它宕机或者不可用，那么我们所有的控制命令都将失效。
	Master节点上运行着以下一组关键进程。
	☆Kubernetes API Server(kube-apiserver),提供了HTTP Rest接口的关键服务进程，是Kubernetes里所有资源的增删改查等操作的唯一入口，也是集群控制的入口进程。
	☆Kubernetes Controller Manager(kube-controller-manager),Kubernetes里所有资源对象的自动化控制中心，可以理解为资源对象的“大总管”。
	☆Kubernetes Scheduler(kube-scheduler),负责资源调度(Pod 调度)的进程，相当于公交公司的“调度室”。
	其实Master节点上往往还启动了一个etcd Server进程，因为Kubernetes里的所有资源对象的数据全部是保存在etcd中的。

	·Node
	除了Master，Kubernetes集群中的其他机器被称为Node节点，在较早的版本中也被称为Minion。与Master一样，Node节点可以是一台物理主机，也可以是一台虚拟机。Node节点才是Kubernetes集群中的工作负载节点，每个Node都会被Master分配一些工作负载(Docker容器)，当某个Node宕机时，其上的工作负载会被Master自动转移到其他节点上去。
	每个Node节点上都运行着以下一组关键进程。
	☆ kubelet: 负责Pod对应的容器的创建、启停等任务，同时与Master节点密切协作，实现集群管理的基本功能。
	☆kube-proxy:实现Kubernetes Service的通信与负载均衡机制的重要组件。
	☆Docker Engine(docker):Docker 引擎，负责本机的容器创建和管理工作。

	·Pod
	Pod是Kubernetes的最重要也是最基本的概念，每个Pod都有一个特殊的被称为“根容器”的Pause容器。Pause容器对应的镜像属于Kubernetes平台的一部分，除了Pause容器，每个Pod还包含一个或多个紧密相关的用户业务容器。

	Pod其实有两种类型：普通的Pod及静态Pod（static Pod),后者比较特殊，它并不存放在Kubernetes的etcd村处理，而是从存放在某个具体的Node上的一个具体文件中，并且只在此Node上启动运行。而普通的Pod一旦被创建，就会被放入到etcd中存储，随后会被Kubernetes Master调度到具体的Node上并进行绑定(Binding)，随后该Pod被对应的Node上的kubelet进程实例化成一组相关的Docker容器并启动起来。在默认情况下，当Pod里的某个容器停止时，Kubernetes会自动检测到这个问题并且重新启动这个Pod（重启Pod里的所有容器），如果Pod所在的Node宕机，则会将这个Node上的所有Pod重新调度到其他节点上。

	·Label
	Label是Kubernetes系统中另外一个核心概念。一个Label是一个key=value的键值对，其中key与value由用户指定。Label可以附加到各种资源对象上，例如Node、Pod、Service、RC等，一个资源对象可以定义任意数量的Label,同一个Label也可以被添加到任意数量的资源对象上去，Label通常在资源对象定义时确定，也可以在对象创建后动态添加或者删除。
	我们可以通过给指定的资源对象捆绑一个或多个不同的Label来实现多维度的资源分组管理功能。
	例如：
	☆版本标签：“release”:"stable","release":"canary" ...
	☆环境标签：“environment”："dev","environment":"qa","environment":"production"
	☆架构标签：“tier":"frontend","tier":"backend","tier":"middleware"
	☆分区标签：”partition":"customerA","partition":"customerB" ...
	☆质量管控标签：“track"：”daily","track":"weekly" 
	Label相当于我们熟悉的“标签”，给某个资源对象定义一个Label,就相当于给它打了一个标签，随后可以通过Label Selector(标签选择器)查询和筛选拥有某些Label的资源对象，kubernetes通过这种方式实现了类似SQL的简单又通用的对象查询机制。
	下面是例子：
	☆ name=redis-slave: 匹配所有具有标签 name=redis-slave的资源对象。
	☆ env !=production: 匹配所有不具有标签env=production的资源对象，比如env=test就是满足次调价的标签之一。
	而后者则使用集合操作的表达式匹配标签，下面是具体例子：
	☆ name in (redis-master,redis-slave):匹配所有具有标签 name=redis-master 或者 name=redis-slave的资源对象。
	☆ name not in (php-frontend): 匹配所有 不具有标签name=php-frontend的资源对象。
	可以通过多个Label Selector表达式的组合实现复杂的条件选择，多个表达式之间用“，” 进行分隔即可，几个条件之间是“and"的关系，即同时满足多个条件，比如下面的例子：
	name=redis-slave,env!=production
	name notin (php-frontend),env!=production
	Label Selector 在Kubernetes 中的重要使用场景有一下几处：
	☆ kube-controller 进程通过资源对象RC上定义的Label Selector 来筛选要监控的Pod副本的数量，从而实现Pod副本的数量始终符合预期设定的全自动控制流程。
	☆ kube-proxy进程通过Service的Label Selector来选择对应的Pod，自动建立起每个Service到对应Pod的请求转发路由表，从而实现Service的智能负载均衡机制。
	☆通过对某些Node定义特定的Label，并且在Pod定义文件中使用NodeSelector这种标签调度策略，kube-scheduler进程可以实现Pod“定向调度”的特性。
	
	总结：使用Label可以给对象创建多组标签，Label和Label Selector 共同构成了Kubernetes 系统中最核心的应用模型，使得被管理对象能够被精细地分组管理，同时实现了整个集群的高可用性。

	· Replication Controller(RC)
	RC是Kubernetes系统中的核心概念之一，简单来说，它其实定义了一个期望的场景，即声明某种Pod的副本数量在任意时刻都符合某个预期值，所以RC的定义包括如下几个部分：
	☆Pod期待的副本数(replicas).
	☆用于筛选目标Pod的Label Selector.
	☆当Pod的副本数量小于预期数量的时候，用于创建新Pod的Pod模板(template).
	当我们定义了一个RC并提交到Kubernetes集群中以后，Master节点上的Controller Manager组件就得到通知，定期巡检系统中当前存活的目标Pod，并确保目标Pod实例的数量刚好等于次RC的期望值，如果有过多的Pod副本在运行，系统就会停掉一些Pod，否则系统就会再自动创建一些Pod。可以说，通过RC,Kubernetes实现了用户应用集群的高可用性，并且大大减少了系统管理员在传统IT环境中需要完成的许多手工运维工作(如主机监控脚本、应用监控脚本、故障恢复脚本等)。
	可以通过执行命令来一键完成动态缩放(Scaling)功能：
	kubectl scale rc redis-slave --replicas=3
	scaled
	需要注意的是，删除RC并不会影响通过该RC已经创建好的Pod.为了删除所有Pod,可以设置replicas的值为0，然后更新该RC。另外，kubectl提供了stop和delete命令来一次性删除RC和RC控制的全部Pod。
	升级系统时，通常会通过Build一个新的Docker镜像，并用新的镜像版本来替代旧版本的方式达到目的。在系统升级过程中，我们希望是平滑，比如当前系统中10个对应的旧版本的Pod，最佳的方式是旧版本的Pod每次停止一个，同时创建一个新版本的Pod，在整个 升级过程中，此消彼长，而运行中的Pod数量始终是10个，几分钟以后，当所有的Pod都已经是最新版本的时候，升级过程完成。通过RC的机制，Kubernetes很容易就实现了这种高级使用的特性，被称为“滚动升级”(Rolling Update)。
	由于Replication Controller 与 Kubernetes代码中的模块Replication Controller同名，同时这个词也无法准确表达它的本意，所以在Kubernetes1.2的时候，它就升级成了另外一个新的概念---Replica Set,官方解释为“下一代的RC”，它与RC当前存在的唯一区别是：Replica Sets支持基于集合的Label Selector(Set-based selector),而RC只支持基于等式的Label Selector(equality-based selector)，这使得Replica Set 的功能更强。

	最后，关于RC(Replica Set)的一些特性和作用：
	☆ 在大多数情况下，我们通过定义一个RC实现Pod的创建过程及副本数量的自动控制。
	☆RC里包括完整的Pod定义模板。
	☆RC通过Label Selector机制实现对Pod副本的自动控制。
	☆通过改变RC里的Pod副本数量，可以实现Pod的扩容或锁绒功能。
	☆通过改变RC里Pod模板中的镜像版本，可以实现Pod的滚动升级功能。


	·Deployment
	Deployment是Kubernetes 1.2引入的新概念，引入的目的是为了更好地解决Pod的编排问题。为此，Deployment在内部使用了Replica Set来实现目的，无论从Deployment的作用于目的、它的YAM定义，还是从它的具体命令行操作来看，我们都可以把它看做RC的一次升级，两者的相似度超过90%。
	Deployment相对于RC的一个最大升级是我们可以随时知道当前Pod"部署”的进度。实际上由于一个Pod的创建、调度、绑定节点及在目标Node上启动对应的容器这一完整过程需要一定的时间，所以我们期待系统启动N个Pod副本的目标状态，实际上是一个连续变化的“部署过程”导致的最终状态。
	Deployement的典型使用场景有以下几个：
	☆ 创建一个Deployment对象来生成对应的Replica Set并完成Pod副本的创建过程。
	☆检查Deployment的状态来看部署动作是否完成(Pod副本的数量是否达到预期的值).
	☆更新Deployment以创建新的Pod（比如镜像升级）。
	☆如果当前Deployment不稳定，则回滚到一个早先的Deployment版本。
	☆挂起或者回复一个Deployment.
	
	·Horizontal Pod Autoscaler(HPA)
	kubernetes 1.1 的版本中首次发布这一重量级新特性--Horizontal Pod Autoscaling.随后的1.2版本中HPA被升级为稳定版本(apiVersion: autoscaling/v1),但同时仍然保留旧版本(apiVersion:extensions/v1beat1),官方的计划是在1.3版本里先移除旧版本，并且会在1.4版本里彻底移除旧版本的支持。
	Horizontal Pod Autoscaling简称HPA,意思是Pod横向自动扩容，与之前的RC、Deployment一样，也属于一种Kubernetes资源对象。通过追踪分析RC控制的所有目标Pod的负载变化情况，来确定是否需要针对性地调整目标Pod的副本数，这是HPA的实现原理。当前，HPA可以有一下两种方式作为Pod负载的度量指标。
	☆ CPUUtilizationPercentage.
	☆应用程序自定义的度量指标，比如服务在每秒内的相应的请求数(TPS或QPS).
	CPUUtilizationPercentage是一个算数平均值，即目标Pod所有副本自身的CPU利用率的平均值。一个Pod自身的CPU利用率是该Pod当前CPU的使用量除以它的Pod Request的值，
	如果目标Pod没蒂尼Pod Reqeust的值，则无法使用CPUUtilizationPercentage来实现Pod横向自动扩容的能力。除了使用CPUUtilizationPercentage,Kubernetes从1.2版本开始，尝试支持应用程序自定义的度量指标，目前仍然为实验特性，不建议在生产使用。
	通过下面的命令行直接创建等价的HPA对象：
	kubectl autoscale deployment php-apache --cpu-percent=90 --min=1 --max=10

	·Service(服务)
	
	☆Node IP:Node节点的IP地址。
	☆Pod IP:Pod的IP地址。
	☆Cluster IP: Service的IP地址。
	
	首先，Node IP 是Kubernetes集群中每个节点的屋里网卡的IP地址，这是一个真实存在的物理网络，所有属于这个网络的服务器之间都能通过这个网络直接通信，Kubernetes集群之外的节点访问Kubernetes集群之内的某个节点或者TCP/IP服务的时候，必须要通过Node IP进行通信。
	其次，Pod IP是每个Pod的IP地址，它是Docker Engine根据docker0网桥的IP地址段进行分配的，通常是一个虚拟的二层网络，Kubernetes要求位于不同Node上的Pod能够彼此直接通信，所以Kubernetes里一个Pod里的容器访问另外一个Pod里的容器，就是通过Pod IP所在的虚拟二层网络进行通信的，而真实的TCP/IP流量则是通过Node IP 所在的物理网卡流出的。
	最后，Cluster IP，是一个虚拟的IP，但更像是一个"伪造"的IP网络，原因有以下几点：
	☆ Cluster IP 仅仅作用于Kubernetes Service这个对象，并由Kubernetes管理和分配IP地址(来源于Cluster IP地址池).
	☆ Cluster IP 无法被Ping,因为没有一个“实体网络对象”来相应。
	☆ Cluster IP 只能结合Service Port 组成一个具体的通信端口，单独的Cluster IP不具备TCP/IP通信的基础，并且它们属于Kubernetes集群这样一个封闭的空间，集群之外的节点如果要访问这个通信端口，则需要做一些额外的工作。
	☆在Kubernetes集群之内，Node IP 网，Pod IP网与Cluster IP网之间的通信，采用的是Kubernetes自己设计的一种编程方式的特殊的路由规则，与我们所熟知的IP路由有很大的不同。

	根据上面的分析和总结，我们基本明白了：Service的Cluster IP 属于Kubernetes集群内部的地址，无法在集群外部直接使用这个地址。那么用户怎么访问它？
	采用NodePort是解决上述问题的最直接、最有效、最常用的做法。具体做法，在Service的丁一一加入
typq:
node Port即可。
	

	·Volume(存储卷)
	Volume是Pod中能够被多个容器访问的共享目录。Kubernetes的Volume概念、用途和目的与Docker的Volume比较类似，但两者不能等价。首先，Kubernetes中的Volume定义在Pod上，然后被一个Pod里的多个容器挂载到具体的文件目录下；其次，Kubernetes中的Volume与Pod的生命周期相同，但与容器的生命周期不相关，当容器终止或者重启时，Volume中的数据也不会丢失。最后，Kubernetes支持多种类型的Volume,例如GlusterFS、Ceph等先进的分布式文件系统。
	Volume的使用也比较简单，在大多数情况下，我们先在PoD上声明一个Volume，然后在容器里引用该Volume并Mount到容器里的某个目录上。
	Kubernetes提供了非常丰富的Volume类型，下面逐一进行说明。
	1.emptyDir
		一个emptyDir Volume 是在Pod分配到Node时创建的。从它的名称就可以看出，它的出事内容为空，并且无需指定宿主机上对应的目录文件，因为这是Kubernetes自动分配的一个目录，当Pod从Node上移除时，emptyDir中的数据也会被永久删除。emptyDir的一些用途如下。
	☆ 临时空间，例如用于某些应用程序运行时所需的临时目录，且无须永久保留。
	☆ 长时间任务的中间过程CheckPoint的临时保存目录。
	☆一个容器需要从另一个容器中获取数据的目录(多容器共享目录).
	2.hostPath
	hostPath为在Pod上挂载宿主机上的文件或目录，它通常可以用以下几方面。
	☆容器应用程序生成的日志文件需要永久保存时，可以使用宿主机的高速文件系统进行存储。
	☆需要访问宿主机上Docker引擎内部数据结构的容器应用时，可以通过定义hostPath为宿主机/var/lib/docker 目录，使容器内部应用可以直接访问Docker的文件系统。
	在使用这种类型的Volume时，需要注意以下几点。
	☆在不同的Node上具有相同配置的Pod可能会因为宿主机上的目录和文件不同而导致对Volume上目录和文件的访问结果不一致。
	☆如果使用了资源配置管理，则Kubernetes无法将hostPath在宿主机上使用的资源纳入管理。
	
	3.gcePersistentDisk
	 使用这种类型的Volume表示谷歌公有云提供的永久磁盘(Persistent Disk,PD)存放Volume的数据，它与EmptyDir不同，PD上的内容会被永久保存，当Pod被删除时，PD只是被卸载(Unmount),但不会被删除。需要注意的是，你需要先创建一个永久磁盘(PD),才能使用gcePersistentDisk。
	使用gcePersistentDisk 有以下一些限制条件：
	☆ Node(运行kubelet的节点)需要是GCE虚拟机。
	☆这些虚拟机需要与PD存在于相同的GCE项目和Zone中。
	通过gcloud命令即可创建一个PD:
	gcloud compute disks create --size=500GB --zone=us-centrall-a my-data-disk
	
	4.awsElasticBlockStore
	 与GCE类似，该类型的Volume使用亚马逊公有云提供的EBS Volume存储数据，需要先创建一个EBS Volume 才能使用awsElasticBlockStore.
	使用awsElasticBlockStore的一些限制条件如下。
	☆ Node(运行kubelet的节点)需要是AWS EC2实例。
	☆ 这些AWS EC2实例需要与EBS volume存在于相同的region和availability-zone中。
	☆ EBS只支持单个EC2实例mount 一个 volume.
	通过aws ec2 create-volume命令可以创建一个EBS volume:
	aws ec2 create-volume --availability-zone eu-west-1a --size 10 --volume-type gp2

	5.NFS
	使用NFS网络文件系统提供的共享目录存储数据时，我们需要在系统中部署一个NFS Server.
	
	6.其他类型的Volume
	☆ iscsi:使用iSCSI存储设备上的目录挂载到Pod中。
	☆flocker:使用Flocker来管理存储卷。
	☆glusterfs:使用开源GlusterFS网络文件系统的目录挂载到Pod中。
	☆rdb:使用Linux块设备共享存储(Rados Block Device)挂载到Pod中。
	☆gitRepo:通过挂载一个空目录，并从GIT库clone一个git repository以供Pod使用。
	☆secret: 一个secret volume用于为Pod提供加密的信息，你可以将定义在Kubernetes中的secret直接挂载为文件让Pod访问。secret volume是通过tmfs(内存文件系统)实现的，所以这种类型的volume总是不会持久化的。
	
	·Persistent Volume
		Volume是定义在Pod上的，属于“计算资源”的一部分，而实际上，“网络存储”是相对独立于“计算资源”而存在的一种实体资源。比如在使用虚机的情况下，我们通常会先定义一个网络存储，然后从中划出一个“网盘”并挂接到虚机上。Persistent Volume(简称PV)和与之相关联的Persistent Volume Claim(简称PVC)也起到了类似的作用。
		PV可以理解成Kubernetes集群中的某个网络存储中对应的一块存储，它与Volume很类似，但有一下区别。
	☆ PV只能是网络存储，不属于任何Node,但可以在每个Node上访问。
	☆PV并不是定义在Pod上的，而是独立于Pod之外定义的。
	☆PV目前只有几种类型：GCE Persistent Disks,NFS,RBD,iSCCI,AWS ElasticBlockStore,GlusterFS等。
	
	比较重要的是PV的accessModes属性，目前有以下类型。
	☆ ReadWriteOnce:读写权限、并且只能被单个Node挂载。
	☆ ReadOnlyMany:只读权限、允许被多个Node挂载。
	☆ReadWriteMany:读写权限，允许被多个Node挂载。

	最后，PV状态：
	☆ Available: 空闲状态。
	☆ Bound: 已经绑定到某个PVC上。
	☆ Released: 对应的PVC已经删除，但资源还没有被集群收回。
	☆ Failed: PV自动回收失败。

	·Namespace(命名空间)
		Namespace(命名空间)是Kubernetes系统中的另一个非常重要的概念，Namespace在很多情况下用于实现多租户的资源隔离。Namespace通过将集群内部的资源对象“分配”到不同的Namespace中，形成逻辑上分组的不同项目、小组或用户组，便于不同的分组在共享使用整个集群的资源的同时还能被分别管理。
	Kubernetes集群在启动后，会创建一个名为“default"的Namespace,通过kubectl可以查看到：
		kubectl get namespaces
	可以在kubectl命令中加入--namespace参数来查看某个命名空间中的对象：
		kubectl get pods --namespace=development
	
	·Annotation(注解)

	Annotation与Label类似，也使用key/value键值对的形式进行定义。不同的是Label具有严格的命名规则，它定义的是Kubernetes对象的元数据(Metadata),并且用于Label Selector.而Annotation则是用于任意定义的"附加"信息，以便于外部工具进行查找，很多时候，Kubernetes的模块自身会通过Annotation的方式标记资源对象的一些特殊信息。
	通常来说，用Annotation来记录的信息如下：
	☆build信息、release信息、Docker镜像信息等，例如时间戳、release id号，PR号，镜像hash值、docker registry地址等。
	☆日志库、监控库、分析库等资源库的地址信息。
	☆程序调试工具信息，例如工具名称、版本号等。
	☆团队的联系信息，例如电话号码、负责人名称、网址等。

	·小结
	 上述这些组件是Kubernetes系统的核心组件，它们共同构成了Kubernetes系统的框架和计算模型。通过对它们进行灵活组合，用户就可以快速、方便地对容器集群进行配置、创建和管理。除了本章所介绍的核心组件，在Kubernetes系统中海油许多辅助配置的资源对象，例如LimitRange、ResourceQuota。另外，一些系统内部使用的对象Binding、Event等请参考Kubernetes的API文档。
	
