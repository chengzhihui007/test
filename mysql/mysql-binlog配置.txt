mysqlbinlog常见的选项：
--start-datetime
--stop-datetime
--start-position
--stop-position
--------------------------------------------------------------------
开启binlog日志，大概会有1%的性能损耗。
--------------------------------------------------------------------
binlog的2个使用场景：
1.mysql主从复制。
2.数据恢复：
	binlog日志包括2类文件：1. .index(二进制日志索引文件) 2. .00000* 二进制日志文件
--------------------------------------------------------------------
开启binlog日志
1.编辑打开mysql配置文件 my.cnf
[mysqld] 添加
log-bin=mysql-bin(也可指定二进制日志生产的路径，如：log-bin/opt/Data/mysql-bin)
server-id=1
binlog_format=MIXED(加入此参数才能记录到insert语句)
2.重启mysqld服务
3.查看binlog日志是否开启
show variables like 'log_%';
---------------------------------------------------------------------
常用的binlog日志列表
1.查看所有binlog日志列表
show master logs;
2.查看master状态，即最新binlog编号,及其最后一个操作时间pos结束点(position) 值
show master status;
3.flush刷新log日志，自此刻起产生一个新编号的binlog日志文件；
flush logs;
ps: mysqld 服务重启时，会自动刷新binlog日志；在mysqlddump备份数据时加 -F 选项也会刷新binlog日志；
4.重置(清空)所有binlog日志
reset master;
-------------------------------------------------------------------
查看binlog日志内容,常用2种方式：
1.使用mysqlbinlog自带查看命令法
	注意：
		a.binlog是二进制文件，普通文件查看器 cat/more/vim 无法打开。
		b.binlog日志与数据库文件在同目录中。
		c.mysql5.5以下版本使用mysqlbinlog命令时如果报错，就加上"--no-defaults" 选项
		d.使用mysqlbinlog命令查看binlog日志内容： mysqlbinlog  xxx.0000002
			解释： server id 1: 数据库主机的服务号
			       end_log_pos 796: sql 结束时的pos节点
			       thread_id=11: 线程号
		e. 也可根据时间点查看
		  mysqlbinlog --no-defaults(5.5以下带上此参数) mysql-bin.000720 --start-datetime="2019-11-29 12:05:00" --stop-datetime="2019-11-29 13:00:00"

2. 上面的内容多，不容易分辨查看到pos点信息，用下面更方便的查询命令：
	show binlog events [IN 'log_name'][FROM pos][LIMIT [offset,]row_count];
	参数解释：
		a. IN 'log_name':指定要查询的binlog文件名(不指定就默认第一个binlog文件)
		b. FROM pos：指定从哪个pos起始点开始查起(不指定就从首个文件首个pos点开始算)
		c.LIMIT [offset] : 偏移量(不指定就是0)
		d. row_count: 查询总条数(不指定就是所有行)
	egg: show binlog events in 'mysql-bin.0000002'\G

几个小demo:
	a.查询第一个最早的binlog日志： 
		show binlog events\G;
	b.指定查询mysql-bin.000002这个文件： 
		show binlog events in 'mysql-bin.000002'\G;
	c.指定查询mysql-bin.000002这个文件，从pos点：624开始查起：
		show binlog events in 'mysql-bin.000002' from 624\G;
	d.指定查询mysql-bin.000002这个文件，从Pos点：624开始查起,查询10条(即10条语句)
		show binlog events in 'mysql-bin.000002' from 624 limit 10\G;
	e.指定查询mysql-bin.0000002这个文件，从pos点：624开始查起，便宜2行(即中间跳过2个)查询10条(即10条语句)。
		show binlog events in 'mysql-bin.000002' from 624 limit 2,10\G;
----------------------------------------------------------------------------------
利用binlog日志恢复mysql数据
1.对 ops库的member表进行操作，并且再创建一个库opts1
create database ops;　

　　　　create database ops1;

　　　　use ops;

　　　　CREATE TABLE IF NOT EXISTS `member` (`id` int(10) unsigned NOT NULL AUTO_INCREMENT,`name` varchar(16) NOT NULL,`sex` enum('m','w') NOT NULL DEFAULT 'm',`age` tinyint(3) unsigned NOT NULL,`classid` char(6) DEFAULT NULL,PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;

　　　　show tables;

　　　　use ops1;

　　　　CREATE TABLE IF NOT EXISTS `member` (`id` int(10) unsigned NOT NULL AUTO_INCREMENT,`name` varchar(16) NOT NULL,`sex` enum('m','w') NOT NULL DEFAULT 'm',`age` tinyint(3) unsigned NOT NULL,`classid` char(6) DEFAULT NULL,PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;

　　　　show tables;
2.场景模拟
	a. ops库会在每天凌晨四点进行一次完全备份的定时计划任务，如下：
		0 4 * * * mysql -uroot -S /mysql.sock -p123456 -B -F -R -x --master-data=2 ops ops1 |gzip > /application/data/backup/ops_$(date+%F).sql.gz
	b.参数说明：
		-B:指定数据库
		-F:刷新日志
		-R:备份存储过程
		-x:锁表
		--master-data:在备份语句里添加CHANGE MASTER语句以及binlog文件及位置点信息。
3.早上9点上班了，由于业务的需求会对数据库进行各种'crud'操作。
	比如：在ops库下和ops1库下member表内插入、修改了数据等等：
	先是早上进行插入数据：

　　　　　　insert into ops.member(`name`,`sex`,`age`,`classid`) values('yiyi','w',20,'cls1'),('xiaoer','m',22,'cls3'),('zhangsan','w',21,'cls5'),('lisi','m',20,'cls4'),('wangwu','w',26,'cls6');

　　　　　　insert into ops1.member(`name`,`sex`,`age`,`classid`) values('yiyi','w',20,'cls1'),('xiaoer','m',22,'cls3'),('zhangsan','w',21,'cls5'),('lisi','m',20,'cls4'),('wangwu','w',26,'cls6');

4.中午又执行了修改数据库操作:
	　update ops.member set name='李四' where id=4;

　　　　update ops1.member set name='李四' where id=4;

 

　　　　update ops.member set name='小二' where id=2;

　　　　update ops1.member set name='小二' where id=2;
5.下午18点，手贱删库了
	drop database ops;

　　　　　　drop database ops1;

　　　　再手残又创建了一个数据库ops2并插入数据

　　　　　　create database ops2;

　　　　　　use ops2;

　　　　　　CREATE TABLE IF NOT EXISTS `member` (`id` int(10) unsigned NOT NULL AUTO_INCREMENT,`name` varchar(16) NOT NULL,`sex` enum('m','w') NOT NULL DEFAULT 'm',`age` tinyint(3) unsigned NOT NULL,`classid` char(6) DEFAULT NULL,PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;

　　　　　　insert into ops2.member(`name`,`sex`,`age`,`classid`) values('yiyi','w',20,'cls1'),('xiaoer','m',22,'cls3'),('zhangsan','w',21,'cls5'),('lisi','m',20,'cls4'),('wangwu','w',26,'cls6');

6.不要慌
	　先仔细查看最后一个binlog日志，并记录下关键的pos点，到底是哪个pos点的操作导致了数据库的破坏（通常在最后几步）；

　　　　a、先备份一下最后一个binlog日志文件：

　　　　　　cd /application/mysql3306/mysql_data

　　　　　　cp -v mysql-bin.000004  /application/data/backup/

　　　　　　ls  /application/data/backup/
b、接着执行一次刷新日志索引操作，重新开始新的binlog日志记录文件。按理说mysql-bin.000004这个文件不会再有后续写入了，因为便于我们分析原因及查找ops节点，以后所有数据库操作都会写入到下一个日志文件。

　　　　　　flush logs;

　　　　　　show master status;
　　7、读取binlog日志的方法上面已经说到。

　　　　a、方法一：使用mysqlbinlog读取binlog日志：

　　　　　　/application/mysql3306/bin/mysqlbinlog /application/mysql3306/mysql_data/mysql-bin.000004

　　　　b、登录服务器，并查看（推荐此种方法）

　　　　　　show binlog events in 'mysql-bin.000003';

　c、或者:

　　　　　　show binlog events in 'mysql-bin.000004'\G;
　通过分析，造成库ops数据破坏的pos点区间是介于3064-3153之间（这是按照日志区间的pos节点算的），造成库ops1库破坏的pos区间是介于3218-3310之间，只要恢复到相应pos点之前就可以了。

　8、先把凌晨4点全备的数据恢复（建议另起一个库，等恢复成功后再替换掉当前库即可）

　　　　cd  /application/data/backup/

　　　　gzip -d ops_2018-09-11.sql.gz

　　　　/application/mysql3307/bin/mysql -uroot -S /application/mysql3307/logs/mysql.sock -p123456 <ops_2018-09-11.sql

　　　　这样就恢复了截止凌晨4:00前的备份数据了
　但是这仅仅只是恢复了当天凌晨4点之前的数据，在4:00--18:00之间的数据还没有恢复回来！！怎么办呢？莫慌！这可以根据前面提到的mysql-bin.000004的新binlog日志进行恢复。
9、从binlog日志恢复数据

　　　　a、恢复命令的语法格式：

　　　　　　mysqlbinlog mysql-bin.0000xx | mysql -u用户名 -p密码 数据库名

　　　　b、常用参数选项解释：

　　　　　　--start-position=875 起始pos点
　　　　　　--stop-position=954 结束pos点
　　　　　　--start-datetime="2016-9-25 22:01:08" 起始时间点
　　　　　　--stop-datetime="2019-9-25 22:09:46" 结束时间点
　　　　　　--database=ops指定只恢复ops数据库(一台主机上往往有多个数据库，只限本地log日志)

　　　　c、不常用选项：

　　　　　　-u --user=name 连接到远程主机的用户名

　　　　　　-p --password[=name]连接到远程主机的密码

　　　　　　-h --host=name 从远程主机上获取binlog日志

　　　　　　--read-from-remote-server从某个Mysql服务器上读取binlog日志

　　　　d、小结：实际是将读出的binlog日志内容，通过管道符传递给myslq命令。这些命令，文件尽量写成绝对路径；

　　　　e、完全恢复（需要手动vim编辑mysql-bin.000003，将那条drop语句剔除掉）(此方法测试未通过)

　　　　　　/application/mysql3306/bin/mysqlbinlog /application/mysql3306/mysql_data/mysql-bin.000004 | /application/mysql3307/bin/mysql -uroot -S /application/mysql3307/logs/mysql.sock -p123456 -v ops

　　　　f、指定pos结束点恢复（部分恢复）：

　　　　　　/application/mysql3306/bin/mysqlbinlog --stop-position=3064 --database=ops  /application/mysql3306/mysql_data/mysql-bin.000002 | /application/mysql3307/bin/mysql -uroot -S /application/mysql3307/logs/mysql.sock -p123456 -v(因为加了--database=ops因此不会恢复二进制日志中关于ops1库的相应操作，若也需要恢复ops1库的相应操作，则再加上--database=ops1即可)

　　　　g、指定pos点区间恢复（部分恢复）

　　　　　　在f环节我们已经恢复到了删库之前的时刻，在删库后我们还做了创建ops2库并创建了member表和增加了数据的操作，此时我们要跳过删库并且恢复到创建ops2库和创建member表的时刻可以采用区间pos点恢复：

/application/mysql3306/bin/mysqlbinlog --start-position=3153 --stop-position=3880 /application/mysql3306/mysql_data/mysql-bin.000002 | /application/mysql3307/bin/mysql -uroot -S /application/mysql3307/logs/mysql.sock -p123456 -v

　　　　　　h、此时后面创建的表member恢复回来了但是库ops1被删除了，因为在这中间有删除ops1库的操作，若想继续恢复后面表中插入的数据只需要以建表后的pos点为开始点即可恢复除删库之外的所有数据。　　　　　　　

　　　　　　　/application/mysql3306/bin/mysqlbinlog --start-position=3880 /application/mysql3306/mysql_data/mysql-bin.000002 | /application/mysql3307/bin/mysql -uroot -S /application/mysql3307/logs/mysql.sock -p123456 -v

　　10、另外：也可指定时间节点区间恢复（部分恢复）：按时间恢复需要mysqlbinlog命令读binlog日志内容，找时间节点。

　　　　　　a、/application/mysql3306/bin/mysqlbinlog /application/mysql3306/mysql_data/mysql-bin.000002

　　/application/mysql3306/bin/mysqlbinlog --stop-datetime="2018-09-12 10:37:58"  /application/data/backup/mysql-bin.000002 | /application/mysql3307/bin/mysql -uroot -S /application/mysql3307/logs/mysql.sock -p123456 -v(此时stopdatetime不能写到2018-09-12 10:38:01否则会更新到drop database ops这个操作，其它时间点同此步骤)

　　　　　　　　b、跳过删库环节恢复后面数据，可以从2018-09-12 10:38:45时间开始恢复，因为删除ops1库的时间不足一秒因此可以这样干，这样干的话库ops1不会被删，不过建议最好还是从下一个时间节点为开始进行恢复,即2018-09-12 11:11:22
　/application/mysql3306/bin/mysqlbinlog --start-datetime="2018-09-12 10:38:45" /application/data/backup/mysql-bin.000002 | /application/mysql3307/bin/mysql -uroot -S /application/mysql3307/logs/mysql.sock -p123456 -v

　　　　　　c、基本原理和通过pos点恢复差不多。

六、总结：

　　所谓恢复，就是让mysql将保存在binlog日志中指定段落区间的sql语句逐个重新执行一次而已。

参考网址：https://www.cnblogs.com/Presley-lpc/p/9619571.html
