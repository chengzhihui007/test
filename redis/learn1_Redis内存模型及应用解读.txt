参考网址:https://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&mid=2650768913&idx=1&sn=df5d7dbe8122b832d3b398f94989c61f&chksm=f3f93384c48eba92b99c54a56049880b9524c40d18f18a1d17d4a8628bd9af57cebf75a5dce0&mpshare=1&scene=1&srcid=0917sAWE8pgS77Sof4BY986X&key=bd4b85cdffb121c03409474e9e5d94ec05a2cf0bfbdb02192edd5f9b965de8d9fbc5690660c56a6eed0c30006a6a868d21f3b1cd546841189326d6bfa5a03f8cb251cd0f7333a0570eafc2815f638d8c&ascene=1&uin=Mjk0MTI1NzUyMQ%3D%3D&devicetype=Windows-QQBrowser&version=6103000b&lang=zh_CN&pass_ticket=nymbVUllgpGQ%2B87glNcTgQCKFDnK2bB8m2lnh65Ic2hm2zSjUxWkfbRP%2Bwji0XUS
一。redis的5种对象类型：字符串、哈希、列表、集合、有序集合。
二。redis在centos上安装步骤：
    1.检查是否有redis yum 源
      yum install redis
    2.下载fedora的opel仓库
      yum install epel-release
    3.安装redis数据库
      yum install redis
    4. 安装完毕后，使用下面命令启动redis服务
       #启动redis 
	service redis start
       #停止redis
	service redis stop
       #查看redis运行状态
	service redis status
       #查看redis 进程
        ps -ef | grep redis
    5.设置redis为开机自动启动
      chkconfig redis on
    6.进入redis服务。
       #进入本机redis
       redis-cli
	#列出所有key
	keys *
    7.防火墙开放相应端口
      #开启6379
	/sbin/iptables -I INPUT -p tcp --dport 6379 -j ACCEPT
      #开启6380
        /sbin/iptables -I INPUT -p tcp --dport 6380 -j ACCEPT
      # 保存
	/etc/rc.d/init.d/iptables save
      # centos 7 下执行
        service iptables save
    8.修改redis默认端口和密码
      vi /etc/redis.conf
       #修改默认端口，查找port 6379 修改为相应端口即可。
       #修改默认密码，查找requirepass foobared 将 foobared 修改为你的密码
       #使用配置文件启动redis
         redis-server /etc/redis.conf &
       #使用端口登录
         redis-cli -h 127.0.0.1 -p 6179
       #停止redis
        redis-cli -h 127.0.0.1 -p 6179
        shutdown
       # 进程号杀掉redis
        ps -ef | grep redis
        kill -9 XXX
三。redis 内存统计
     #redis-cli 连接redis
      info memory 
     # Memory
	used_memory:812600       
	used_memory_human:793.55K
	used_memory_rss:2547712  
	used_memory_rss_human:2.43M 
	used_memory_peak:812600
	used_memory_peak_human:793.55K
	total_system_memory:1910042624
	total_system_memory_human:1.78G
	used_memory_lua:37888
	used_memory_lua_human:37.00K
	maxmemory:0
	maxmemory_human:0B
	maxmemory_policy:noeviction
	mem_fragmentation_ratio:3.14
	mem_allocator:jemalloc-3.6.0
     说明：
       1.used_memory: Redis分配器分配的内存总量(单位是字节),包括使用的虚拟内存(swap).used_memory_human显示友好。
       2.used_memory_rss:Redis进程占据操作系统的内存(单位是字节)，与top及ps命令看到的值是一致的；除了分配器分配的内存外，used_memory_rss还包括进程运行本身需要的内存、内存碎片等，但是不包括虚拟内存。
       因此，used_memory和used_memory_rss,前者是从Redis角度得到的量，后者是从操作系统角度得到的量。二者之所以有所不同，一方面是因为内存碎片和Redis进程运行需要占用内存，使得前者可能比后者小，另一方面虚拟内存的存在，使得前者可能比后者大。
       由于在实际应用中，，Redis的数据量会比较大，此时进程占用的内存与Redis数据量和内存碎片相比，都会小很得多；因此used_memory_rss和used_memory的比例便成了衡量Redis内存碎片率的参数；这个参数就是mem_fragmentation_ratio.
      3.mem_fragmentation_ratio:即内存碎片比率，该值是used_memory_rss/used_memory的比值。
        mem_fragmentation_ratio 一般大于1，且该值越大，内存碎片比例越大。如果mem_fragmentation_ratio < 1 ,说明Redis使用了虚拟内存，由于虚拟内存的媒介是磁盘，比内存速度要慢很多，当这种情况出现时，应该及时排查，如果内存不足应该及时处理，如增加Redis节点，增加Redis服务器的内存，优化应用等。
        一般来说，mem_fragmentation_ratio在1.03左右是比较健康的状态(对于jemalloc来说);上面截图中的mem_fragmentation_ratio值很大，是因为还没有向Redis中存入数据，Redis进程本身运行的内存使得used_memory_rss比used_memory大得多。
      4.mem_allocator: Redis使用的内存分配器，在编译时指定，可以是libc、jemalloc或者tcmalloc,默认是jemalloc.截图中使用的便是默认的jemalloc.
四。Redis内存划分
    Redis作为内存数据库，在内存中存储的内容主要是数据(键值对)。通过前面的叙述可以知道，除了数据以外，Redis的其他部分也会占用内存。
   1.数据
     作为数据库，数据是最主要的部分，这部分的内存会统计在used_memory中。
     Redis使用键值对存储数据，其中的值(对象)包括5种类型：字符串、哈希、列表、集合、有序集合。
     这5种类型是Redis对外提供的，实际上，在Redis内部，每种类型可能有 2种或更多的内部编码实现。此外，Redis在存储对象时，并不是直接将数据扔进内存，而是会对对象进行各种包装：如RedisObject,SDS等。
   2.进程本身运行需要的内存。
     Redis主进程本身运行肯定需要占用内存，如代码、常量池等等。这部分内存大约几兆，在大多数生产环境中与Redis数据占用的内存相比可以忽略。这部分内存不是由jemalloc分配，因此不会统计在used_memory中。
    补充说明：除了主进程外，Redis创建的子进程运行也会占用内存，如Redis执行AOF、RDB重写时创建的子进程。当然，这部分内存不属于Redis进程，也不会统计在used_memory和used_memory_rss中。
   3.缓冲内存
     缓冲内存包括：
     客户端缓冲区：存储客户端连接的输入输出缓冲；
     复制积压缓冲区：用于部分复制功能；
     AOF缓冲区：用于在进行AOF重写时，保存最近的写入命令。
    在了解相应功能之前，不需要知道这些缓冲的细节。这部分内存由jemalloc分配，因此会统计在used_memory中。   4.内存碎片
     内存碎片是Redis在分配、回收物理内存过程中产生的。例如，如果对数据更改频繁，而且数据之间的大小相差很大，可能导致Redis释放的空间在物理内存中并没有释放，但Redis又无法有效利用，这就形成了内存碎片。内存碎片不会统计在used_memory中。
     内存碎片的产生与对数据进行的操作、数据的特点等都有关。此外，与使用的内存分配器也有关系——如果内存分配器设计合理，可以尽可能的减少内存碎片的产生。
     如果Redis服务器中的内存碎片已经很大，可以通过安全重启的方式减小内存碎片。因此重启之后，Redis重新从备份文件中读取数据，在内存中进行重排，为每个数据重新选择合适的内存单元，减小内存碎片。
五。Redis数据存储的细节
   1.概述
    关于Redis数据存储的细节，涉及到内存分配器(如jemalloc)、简单动态字符串(SDS)、5中对象类型及内部编码、RedisObject。
    下图是执行set hello world时，所涉及到的数据模型。
     图片来源： https://searchdatabase.techtarget.com.cn/7-20218/
                https://searchdatabase.techtarget.com.cn/wp-content/uploads/res/database/article/2011/2011-11-14-16-56-18.jpg
    (1)dictEntry: Redis是Key-Value数据库，因此对每个键值对都会有一个dictEntry，里面存储了指向Key和Value的指针；next指向下一个dictEntry，与本Key-Value无关。
    (2)Key: Key("hello") 并不是直接以字符串存储，而是存储在SDS结构中。
    (3)redisObject:Value(“world”)既不是直接以字符串存储，也不是像Key一样直接存储在SDS中，而是存储在redisObject中。实际上，不论Value是5种类型的哪一种，都是通过RedisObject来存储的；而RedisObject中的type字段指明了Value对象的类型，ptr字段则只需对象所在的地址。不过可以看出，字符串对象虽然经过了RedisObject的包装，但仍然需要通过SDS存储。
       实际上，RedisObject除了type和ptr字段以外，还有其他字段，如用于指定对象内部编码的字段。
    (4)jemalloc:无论是DictEntry对象，还是RedisObject、SDS对象，都需要内存分配器(如jamalloc) 分配内存进行存储。以DictEntry对象为例，有3个指针组成，在64位机器下占24个字节，jemalloc会为它分配32字节大小的内存单元。
  2.jemalloc
    Redis在编译时便会指定内存分配器；内存分配器可以是libc、jemalloc或者tcmalloc，默认是jemalloc.
    jemalloc 作为Redis的默认内存分配器，在减小内存碎片方面做的相对比较好。jemalloc在64位系统中，将内存空间划分为小、大、巨大三个范围；每个范围内又划分了许多小的内存块单位；当Redis存储数据时，会选择大小最合适的内存块进行存储。
   jemalloc划分的内存单元如下图所示:
         图片来源： http://blog.csdn.net/zhengpeitao/article/details/76573053
                    http://img.mp.itc.cn/upload/20170426/2727dfb311cf4d90a6d6e5b38fc96e9f
  例如，如果需要存储大小为130字节的对象，jemalloc会将其放入160字节的内存单元中。
 3.RedisObject
   Redis对象有5种类型；无论是哪种类型，Redis都不会直接存储，而是通过RedisObject对象进行存储。
   RedisObject对象非常重要，Redis对象的类型、内部编码、内存回收、共享对象等功能，都需要RedisObject支持，下面将通过RedisObject的结构来说明它是如何作用的。
  RedisObject的定义如下（不同版本的Redis可能稍稍有所不同）：

typedef struct redisObject {

　　unsigned type:4;

　　unsigned encoding:4;

　　unsigned lru:REDIS_LRU_BITS; /* lru time (relative to server.lruclock) */

　　int refcount;

　　void *ptr;

} robj;

  (1) type
      type字段表示对象的类型，占4个比特；目前包括REDIS_STRING(字符串),REDIS_LIST(列表),REDIS_HASH(哈希)、REDIS_SET(集合)、REDIS_ZSET(有序集合).
      通过type命令，获取 类型，如下图：
       https://mmbiz.qpic.cn/mmbiz_png/tibrg3AoIJTvF2PcqM0ZZaGyKOT2zKc5MYGdC9jbwVuicZFV2MIuQkQREH0hPvibMiaZkwOWHlaPXZLgPLmb5uApag/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1
  (2) encoding
      encoding表示对象的内部编码，占4个比特。
      对于Redis支持的每种类型，都有至少两种内部编码，例如对于字符串，有int,embstr,raw三种编码。通过encoding属性，Redis可以根据不同的使用场景来为对象设置不同的编码，打大提高了Redis的灵活性和效率。
     以列表对象为例，有压缩表和双端链表两种编码方式；如果列表中的元素较少，Redis倾向于使用亚索列表进行存储，因为压缩列表占用内存更少，而且比双端链表可以更快载入；当列表对象元素较多时，亚索列表就会转化为更适合存储大量元素的双端链表。
    通过 object encoding 命令，查看对象采用的编码方式，如下图：
    https://mmbiz.qpic.cn/mmbiz_png/tibrg3AoIJTvF2PcqM0ZZaGyKOT2zKc5M5bCcZL2CJ9pmP6xLhHuDzFH8TudLibWmXBBjE4jtw5ruWTOzF7PxMMg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1
  (3)lru
     lru记录的是对象最后一次被命令程序访问的时间，占据的比特数不同的版本有所不同(如4.0版本占24比特，2.6版本占22比特)。
     通过对比lru时间与当前时间，可以计算某个对象的空转空间；object idletime命令可以显示该空转时间(单位是秒)。object idletime命令的一个特殊之处在于它不改变对象的lru值。
     https://mmbiz.qpic.cn/mmbiz_png/tibrg3AoIJTvF2PcqM0ZZaGyKOT2zKc5MKa3nLB8bhibPLz283RhGOTnpWvG1yPTnZwT862dWPGbxNlVWwxibvtZA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1
     lru值除了通过object idletime 命令打印之外，还与Redis的内存回收有关系：如果Redis打开了maxmemory选项,且内存回收算法选择的是volatile-lru或allkeys-lru，那么当Redis内存占用超过maxmemory指定的值时,Redis会有限选择空转时间最长的对象进行释放。
  (4)refcount
     refcount记录的是该对象被引用的次数，类型为整型。refcount的作用，主要在于对象的引用计数和内存回收：       当创建新对象时，refcount初始值为1；
       当有新程序使用该对象时，refcount加1；
       当对象不再被一个新程序使用时，refcount减1；
       当refcount变为0时，对象占用的内存会被释放。
     Redis中被多次使用的对象(refcount>1)称为共享对象。Redis为了节省内存，当有一些对象重复出现时，新的程序不会创建新的对象，而是依然使用原来的对象。这个被重复使用的对象，就是共享对象。目前共享对象仅支持整数值的字符串对象。
     共享对象的具体实现：
     Redis的共享对象目前只支持整数值的字符串对象。之所以如此，实际上是对内存和CPU(时间)的平衡；共享对象虽然会降低内存消耗，但是判断两个对象是否相等却需要消耗额外的时间。
      ·对于整数值，判断操作复杂度为O(1);
      ·对于普通字符串，判断复杂度为O(n);
      ·而对于哈希、列表、集合和有序集合，判断的复杂度为O(n^2).
     虽然共享对象只能是整数值的字符串对象，但是5种类型都可能使用共享对象(如哈希、列表等的元素可以使用).
     就目前的实现来说，Redis服务器在初始化时，会创建10,000个字符串对象，值分别是0~9999的整数值；当Redis需要使用值为0~9999的字符串对象时，可以直接使用这些共享对象。10,000这个数字可以通过调整参数REDIS_SHARED_INTEGERS(4.0中是OBJ_SHARED_INTEGERS)的值进行改变。
     共享对象的引用次数可以通过object refcount命令查看，如下图所示。命令执行的结果页佐证了只有0~9999之间的证书会作为共享对象。
     https://mmbiz.qpic.cn/mmbiz_png/tibrg3AoIJTvF2PcqM0ZZaGyKOT2zKc5MYwcZ6EVAkpaTF47ZtyrmFSbE7Lkcw6l0EmSO0iawekrchfXMzHCEPlg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1
   (5)ptr
      ptr指针指向具体的数据，如前面的例子中，set hello world, ptr 指向包含字符串world的SDS。
   (6)总结
      综上所述，redisObject的结构与对象类型、编码、内存回收、共享对象都有关系；一个redisObject对象的大小为16字节： 4bit+4bit+24bit+4byte+8byte  = 16 byte.
  4.SDS
    Redis没有直接使用C字符串(即以空字符'\0'结尾的字符数组)作为默认的字符串表示，而是使用了SDS.SDS是简单动态字符串(Simple Dynamic String)的缩写。
   (1)SDS结构
     sds的结构如下：
      struct sdshdr {
    	int len;
    	int free;
    	char buf[];
	};
     其中，buf表示字节数组，用来存储字符串；len表示buf已使用的长度，free表示buf未使用的长度。
     下图是两个例子：
         https://mmbiz.qpic.cn/mmbiz_png/tibrg3AoIJTvF2PcqM0ZZaGyKOT2zKc5MlWX8ObJrG5C3rw3w4TseP1pYQOo1hwlYOZD4FvJsmoGvaJPekIKSXA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1
     通过SDS的结构可以看出,buf数组的长度=free+len+1(其中1表示字符串结尾的空字符);所以，一个SDS结构占据的空间为: free所占长度 + len 所占长度 + buf数组的长度 = 4+4 +free+len+1=free+len+9.
   (2) SDS与C字符串的比较
      SDS在C字符串的基础上加入了free和len字段，带来了很多好处：
       ·获取字符串长度：SDS是O(1),C字符串是O(n).
       ·缓冲区溢出:使用C字符串的API时,如果字符串长度增加(如strcat操作)而忘记重新分配内存，很容易造成缓冲区的溢出;而SDS由于记录了长度，相应的API在可能造成缓冲区溢出时会自动重新分配内存，杜绝了缓冲区溢出。
       · 修改字符串时内存的重分配：对于C字符串，如果要修改字符串，必须要重新分配内存(先释放再申请),因为如果没有重新分配，字符串长度增大时会造成内存缓冲区溢出，字符串长度减小时会造成内存泄露。而对于SDS，由于可以记录len和free，因此解除了字符串长度和空间数组长度之间的关联，可以在此基础上进行优化——空间预分配策略(即分配内存时比实际需要的多)使得字符串长度增大时重新分配内存的概率大大减小；惰性空间释放策略使得字符串长度减小时重新分配内存的概率大大减小。
       ·存取二进制数据: SDS可以，C字符串不可以。因为C字符串以空字符作为字符串结束的标识，而对于一些二进制文件(如图片等)，内容可能包括空字符串，因此C字符串无法正确存取，而SDS以字符春长度Len来作为字符串结束标识，因此没有这个问题。
     此外，由于SDS中的buf仍然使用了C字符串(即以'\0'结尾)，因此SDS可以使用C字符串库中的部分函数。但是需要注意的是，只有当SDS用来存储文本数据时才可以这样使用，在存储二进制数据时则不行('\0'不一定是结尾).
   (3)SDS与C字符串的应用
     Redis在存储对象时，一律使用SDS代替C字符串。例如set hello world命令，hello和world都是以SDS的形式存储的。而sadd myset member1 member2 member3  命令，不论是键"myset" , 还是 集合中的元素member1,member2,member3，都是以SDS的形式存储，除了存储对象，SDS还用于存储各种缓冲区。
     只有在字符串不会改变的情况下，如打印日志时，才会使用CC字符串。
六。Redis的对象类型与内部编码
    Redis支持5种对象类型，而每种结构都有至少两种编码。这样做的好处在于:一方面接口与实现分离，当需要增加或改变内部编码时，用户使用不受影响，另一方面可以根据不同的应用场景切换内部编码，提高效率。
   Redis各种对象类型支持的内部编码如下图所示(图中版本是Redis3.0,Redis后面版本中又增加了内部编码，略过不提。):
       https://mmbiz.qpic.cn/mmbiz_png/tibrg3AoIJTvF2PcqM0ZZaGyKOT2zKc5MK5bopX6IFZZIQb0OmvVzPStn72TUY982G3eYKK0QWJZMJlsFI93RSA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1
   关于Redis内部编码的转换，都符合以下规律:编码转换在Redis写入数据时完成，且转换过程不可逆，只能从小内存编码向大内存编码转换。
    1.字符串
     (1)概况
        字符串是最基础的类型，因为所有的键都是字符串类型，且字符串之外的其他几种复杂类型的元素也是字符串。字符串长度不能超过512MB.
     (2)内部编码
       字符串类型的内部编码有3种，它们的应用场景如下：
       · int： 8个字节的长整型。字符串值是整型时，这个值使用long整型表示。
       · embstr: <=39字节的字符串。embstr与raw都使用RedisObject和SDS保存数据。区别在于：embstr的使用只分配一次内存空间(因此RedisObject和SDS是连续的),而raw需要分配两次内存空间(分别为RedisObject和SDS分配空间)。因此与raw相比，embstr的好处在于创建时少分配一次空间、删除时少释放一次空间、对象的所有数据连在一起，寻找方便。而embstr的坏处也很明显；如果字符串的长度增加需要重新分配内存时，整个RedisObject和SDS都需要重新分配空间，因此Redis中的embstr实现为只读。
      ·raw：大于39个字节的字符串。
      示例如下图所示:
        https://mmbiz.qpic.cn/mmbiz_png/tibrg3AoIJTvF2PcqM0ZZaGyKOT2zKc5MNIfZb1a82ku4ibW3qIiavOyqEaslHKlb1mE6EK1HRbxicFrqutdQnWyBQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1
      embstr和raw进行区分的长度是39是因为RedisObject的长度是16字节，SDS的长度是9+字符串长度。因此当字符串长度是39时，embstr的长度正好是16+9+39=64，jemalloc正好可以分配64字节的内存单元。
     (3) 编码转换
        当int 数据不再是整数，或大小超过了long的范围时，自动转化为raw.
        而对于embstr，由于其实现是只读的，因此在对embstr对象修改时，都会先转化为raw再进行修改,因此,只要是修改embstr对象，修改后的对象一定是raw的，无论是否达到了39个字节。示例如下图所示:
         https://mmbiz.qpic.cn/mmbiz_png/tibrg3AoIJTvF2PcqM0ZZaGyKOT2zKc5MhSic2YDbEmD2XbYfaxwtcHYQW8kxibwniaO0WIWIBfFvPHANlicKtdNMmQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1
    2.列表
     (1) 概况
        列表(list) 用来存储多个有序的字符串，每个字符串称为元素；一个列表可以存储2^32-1个元素。Redis中的列表支持两端插入和弹出，并可以获得指定位置(或范围)的元素，可以充当数组、队列、栈等。
     (2)内部编码
        列表的内部编码可以是压缩列表(ziplist)或双端链表(linkedlist).
        双端链表: 由一个list结构和多个listNode结构组成，典型结构如下图所示:
          https://mmbiz.qpic.cn/mmbiz_jpg/tibrg3AoIJTt457goBJ2qic96Wd1zuW4L1fPz8DQ7fc1DhrLF0W6tj5wZFicXS3sSq2l4rIgGMFYZicwvEiasfRpQcw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1
        通过图中可以看出，双端链表同时保存了表头指针和表尾指针，并且每个节点都有指向前和指向后的指针。链表中保存了列表的长度，dup,free和match为节点值设置类型特定函数，所以链表可以用于保存 各种不同类型的值。而链表中每个节点指向的是type为字符串的RedisObject.
        压缩列表: 压缩列表是Redis为了节约内存而开发的，是由一系列特殊编码的连续内存块(而不是像双端链表一样每个节点是指针)组成的顺序型数据结构；具体结构相对比较复杂，略。与双端链表相比，压缩列表可以节省内存空间，但是进行修改或增删操作时，复杂度较高，因此当节点数据较少时，可以使用压缩列表。但是节点数量多时，还是使用双端链表划算。
        压缩列表不仅用于实现列表，也用于实现哈希、有序列表，使用非常广泛。
    (3)编码转换
      只有同时满足下面两个条件时，才会使用压缩列表：
       ·列表中元素数量小于512个；
       ·列表中所有字符串对象都不足64字节。
     如果有一个条件不满足，则使用双端链表，且编码只可能由压缩列表转化为双端链表，反方向则不可能。
     下图展示了列表编码转换的特点：
      https://mmbiz.qpic.cn/mmbiz_png/tibrg3AoIJTvF2PcqM0ZZaGyKOT2zKc5MnbQuamqZ5ISvr7Qrvf99P4yPccXoNmzE8QibgYcA0k0h0Fjje67sn2Q/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1
     其中，单个字符串不能超过64字节，是为了便于统一分配每个节点的长度。这里的64字节是指字符串的长度，不包括SDS结构，因为压缩列表使用连续、定长内存块存储字符串，不需要SDS结构指明长度。
   3.哈希
    (1)概况
       哈希作为一种数据结构，不仅是字符串、列表、集合、有序集合并列，是Redis对外提供的5种对象类型的一种，也是Redis作为Key-Value数据库所使用的数据结构。
    (2)内部编码
       内层的哈希使用的内部编码可以是压缩列表(ziplist)和哈希表(hashtable)两种；Redis的外层的哈希则只使用了hashtable。
       与哈希表相比，压缩列表用于元素个数少、元素长度小的场景，其优势在于集中存储，节省空间。同时，虽然对于元素的操作复杂度也由O(n)变为了O(1),但由于哈希中元素数量较少，因此操作的时间并没有冥想劣势。
       hashtable: 一个hashtable由1个dict结构、2个dictht结构、1个dictEntry指针数组(称为bucket)和多个dictEntry结构组成。
  
