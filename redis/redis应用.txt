参考网址：https://blog.csdn.net/plgy_y/article/details/72824402


redis所需要的配置文件：https://mvnrepository.com/artifact/redis.clients/jedis 
一。估算Redis内存使用量
内存使用量计算方法:
      egg: 假设有90000个键值对，每个key的长度是7个字节，每个value的长度也是7个字节（且key和value都不是整数）。

       每个dictEntry占据的空间包括：
	·一个dictEntry，24字节，jemalloc会分配32字节的内存块。
	·一个key，7字节，所以SDS(key)需要7+9=16个字节，jemalloc会分配16字节的内存块。
	·一个RedisObject，16字节，jemalloc会分配16字节的内存块。
	·一个value，7字节，所以SDS(value)需要7+9=16个字节，jemalloc会分配16字节的内存块。
	综上，一个dictEntry需要32+16+16+16=80个字节。
	bucket空间：bucket数组的大小为大于90000的最小的2^n，是131072，每个bucket元素为8字节（因为64位系统中指针大小为8字节）。
	因此，可以估算出这90000个键值对占据的内存大小为：90000*80 + 131072*8 = 8248576。
        对于字符串类型之外的其它类型，对内存占用的估算方法是类似的，需要结合具体类型的编码方式来确定。
二。优化内存占用
    了解Redis的内存模型，对优化Redis内存占用有很大帮助。下面介绍几种优化场景：
    (1)利用jemalloc特性进行优化
       例如上面的90,000个键值便是一个例子。由于jemalloc分配内存时数值是不连续的，因此key/value字符串变化一个字节，可能会引起占用内存很大的变动，在设计时可以利用这一点。
	例如，如果key的长度如果是8个字节，则SDS为17字节，jemalloc分配32字节；此时将key长度缩减为7个字节，则SDS为16字节，jemalloc分配16字节，则每个key所占用的空间都可以缩小一半。
     (2) 使用整型/长整型
	如果是整型/长整型，Redis会使用int类型(8字节)存储来代替字符串，可以节省更多空间。因此在可以使用长整型/整型代替字符串的场景下，尽量使用长整型/整型。
     (3)共享对象
       利用共享对象，可以减少对象的创建(同时减少了RedisObject的创建),节省内存空间。
       目前Redis中的共享对象只包括10,000个整数(0-9999),可以通过调整REDIS_SHARED_INTEGERS参数提高共享对象的个数。例如将REDIS_SHARED_INTEGER调整到20,000，则0-19,999之间的对象都可以共享。
       考虑这样一种场景:论坛网站在Redis中存储了每个帖子的浏览数，而这些浏览数绝大多数分布在0-20000之间，这时候通过适当增大REDIS_SHARED_INTEGERS参数，便可以利用共享对象节省内存空间。
     (4)避免过度设计
	然而需要注意的是，不论是哪种优化场景，都要考虑内存空间与设计复杂度的权衡；而设计复杂度会影响到代码的复杂度、可维护性。
	如果数据量较小，那么为了节省内存而使得代码的开发、维护变得更加困难并不划算；还是以90,000个键值对为例，实际上节省的内存空间只有几MB.但是如果数据量有几千万甚至上亿，考虑内存的优化就比较必要了。
三。关注内存碎片率
      内存碎片率是一个重要的参数，对Redis内存的优化有重要意义。
      如果内存碎片率过高(jemalloc在1.03左右比较正常)，说明内存碎片多，内存浪费严重。这时，可以考虑重启Redis服务，在内存中对数据进行重排，减少内存碎片。
      如果内存碎片率小于1，说明Redis内存不足，部分数据使用了虚拟内存(即swap)；由于虚拟内存的存取速度比物理内存差很多(2-3个数量级)，此时Redis的访问速度可能会变得很慢。因此必须设法增大物理内存(可以增加服务器节点数量，或提高单机内存)，或减少Redis中的数据。
      要减少Redis中的数据，除了选用合适的数据类型、利用共享对象等，还有一点事要设置合理的数据回收策略(maxmemory-policy)，当内存达到一定量后，根据不同的优先级对内存进行回收。

